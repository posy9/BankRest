openapi: 3.0.3
info:
  title: Bank Cards API
  version: v1
  description: |
    ## This application is made as a test task.
    ## When the application is launched, the following roles are added to the database:
    ### id: 1 name: ROLE_ADMIN
     ### id: 2 name: ROLE_USER
    ## and bank card statuses:
     ### id: 1 name: BLOCKED
    ### id: 2 name: ACTIVE
     ### id: 3 name: EXPIRED
    ## created administrator:
    ### username: admin
    ### password: 123456

servers:
  - url: http://localhost:8080
paths:
  /api/users/{id}:
    get:
      security:
        - BearerAuth: [ ]
      description: Returns user with specified id. For administrators only
      tags:
        - User managing
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: User with the specified id not found
        403:
          description: Request not from administrator
        200:
          description: Returns user with specified id.
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/UserRead"
    put:
      security:
        - BearerAuth: [ ]
      description: Updates user. For administrators only
      tags:
        - User managing
      operationId: updateEntity
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
        required: true
      responses:
        400:
          description: Wrong request body, user is already exist or attempt to make a user who owns the cards an administrator
        403:
          description: Request not from administrator
        200:
          description: Updated user is successfully returned
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/UserRead"
    delete:
      security:
        - BearerAuth: [ ]
      description: Deletes user. For administrators only
      tags:
        - User managing
      operationId: deleteEntity
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: User with the specified id is not found or administrator is trying to delete other administrator
        403:
          description: Request not from administrator. The administrator is trying to delete itself
        204:
          description: User with the specified id is successfully deleted
  /api/cards/{id}:
    get:
      description: Returns card with specified id. All cards for administrators and own cards for user
      security:
        - BearerAuth: [ ]
      tags:
        - Card managing
      operationId: getCardById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Card not found or not belongs to the user
        "200":
          description: Returns card with specified id
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CardRead"
    put:
      description: Updates card. For administrators only
      security:
        - BearerAuth: [ ]
      tags:
        - Card managing
      operationId: updateCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardUpdate"
        required: true
      responses:
        403:
          description: Request not from administrator
        400:
          description: Wrong response body, card is already exist or trying to assign card for administrator
        200:
          description: Updated card is successfully returned
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CardRead"
    delete:
      description: Deletes card. For administrators only
      security:
        - BearerAuth: [ ]
      tags:
        - Card managing
      operationId: deleteCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        403:
          description: Request not from administrator
        400:
          description: Card with specified id is notfound
        204:
          description: Card with the specified id is successfully deleted
    patch:
      description: Changes card status. For administrators only
      security:
        - BearerAuth: [ ]
      tags:
        - Card managing
      operationId: changeCardStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardPatch"
        required: true
      responses:
        400:
          description: Wrong request body
        403:
          description: Request not from administrator
        200:
          description: Card with changed status is successfully returned
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CardRead"
  /api/block/{id}:
    get:
      security:
        - BearerAuth: [ ]
      description: Returns block request with specified id. For administrators only
      tags:
        - Card block request managing
      operationId: getBlockRequestById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Block request with the specified id not found
        200:
          description: Returns block request with specified id.
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/BlockRequestRead"
        403:
          description: Request not from administrator
    put:
      description: Updates block request. For administrators only
      security:
        - BearerAuth: [ ]
      tags:
        - Card block request managing
      operationId: updateBlockRequest
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlockRequestUpdate"
        required: true
      responses:
        400:
          description: Wrong request body or Block request for the card is already exist
        403:
          description: Request not from administrator
        200:
          description: Updated block request is successfully returned
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/BlockRequestRead"
    delete:
      description: Deletes block request. For administrators only
      security:
        - BearerAuth: [ ]
      tags:
        - Card block request managing
      operationId: deleteBlockRequest
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Block request with the specified id not found
        403:
          description: Request not from administrator
        204:
          description: Block request with the specified id is successfully deleted
  /api/users:
    get:
      security:
        - BearerAuth: [ ]
      description: Returns a list of Users. For administrators only
      tags:
        - User managing
      operationId: getAllUsers
      parameters:
        - name: roleId
          description: To sort users by roles
          in: query
          required: false
          schema:
            type: integer
        - name: username
          description: To find users by name
          in: query
          required: false
          schema:
            type: string
        - name: size
          in: query
          required: false
          description: To specify the number of elements in the response
          schema:
            type: integer
        - name: page
          in: query
          required: false
          description: To specify the number of page in the response
          schema:
            type: integer
        - name: sort
          in: query
          required: false
          description: To specify sorting
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - role_id,asc
                - role_id,desc
                - username,asc
                - username,desc
      responses:
        403:
          description: Request not from administrator
        400:
          description: No users were found
        200:
          description: Page of users is successfully returned
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PageUserRead"
    post:
      security:
        - BearerAuth: [ ]
      description: Creates user. For administrators only
      tags:
        - User managing
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
        required: true
      responses:
        400:
          description: Wrong request body or user is already exist
        403:
          description: Request not from administrator
        201:
          description: Created
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/UserRead"
  /api/cards:
    get:
      security:
        - BearerAuth: [ ]
      description: Returns a list of cards from all users for administrator and list of own cards for the user
      tags:
        - Card managing
      operationId: getAllCards
      parameters:
        - name: cardNumber
          description: To find card by number
          in: query
          required: false
          schema:
            type: string
        - name: userId
          description: To find cards by user
          in: query
          required: false
          schema:
            type: integer
        - name: statusId
          description: To find cards by status
          in: query
          required: false
          schema:
            type: integer
        - name: size
          in: query
          required: false
          description: To specify the number of elements in the response
          schema:
            type: integer
        - name: page
          in: query
          required: false
          description: To specify the number of page in the response
          schema:
            type: integer
        - name: sort
          in: query
          required: false
          description: To specify sorting
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - status_id,asc
                - status_id,desc
                - user_id,asc
                - user_id,desc
                - card_number,asc
                - card_number,desc
      responses:
        400:
          description: No cards found
        403:
          description: Request is not from an authorized user
        200:
          description: Page of cards is successfully returned
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PageCardRead"
    post:
      security:
        - BearerAuth: [ ]
      description: Creates card. For administrators only
      tags:
        - Card managing
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardCreate"
        required: true
      responses:
        400:
          description: Wrong request body, trying to create card for administrator or card is already exists
        201:
          description: Created
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CardRead"
        403:
          description: Request not from administrator
  /api/cards/{fromCardId}/transfer:
    post:
      description: Transfers money between user cards. Only for user
      security:
        - BearerAuth: [ ]
      tags:
        - Card managing
      operationId: makeTransfer
      parameters:
        - name: fromCardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transfer"
        required: true
      responses:
        "400":
          description: Wrong request body or user is trying to transfer money between invalid cards or to another user
        "200":
          description: OK
  /api/block:
    get:
      description: Returns a list of block requests. For administrators only
      security:
        - BearerAuth: [ ]
      tags:
        - Card block request managing
      operationId: getBlockRequests
      parameters:
        - name: size
          in: query
          required: false
          description: To specify the number of elements in the response
          schema:
            type: integer
        - name: page
          in: query
          required: false
          description: To specify the number of page in the response
          schema:
            type: integer
        - name: sort
          in: query
          required: false
          description: To specify sorting
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - card_id,asc
                - card_id,desc

      responses:
        400:
          description: No block requests were found
        403:
          description: Request not from administrator
        200:
          description: Page of block request is successfully returned
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PageBlockRequest"
    post:
      description: Creates block request. For users only
      security:
        - BearerAuth: [ ]
      tags:
        - Card block request managing
      operationId: createBlockRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlockRequestCreate"
        required: true
      responses:
        400:
          description: Wrong request body or request for the card is already exist
        403:
          description: Request not from user
        201:
          description: Block request was successfully created
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/BlockRequestRead"


  /api/auth/refresh:
    post:
      description: Getting a new access token using a refresh token
      tags:
        - Authentication and authorization
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshRequest"
        required: true
      responses:
        401:
          description: Refresh token expired

        400:
          description: A refresh token of the wrong format was provided.

        200:
          description: Access token generated successfully
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/auth/login:
    post:
      description: Getting access and refresh tokens by login and password
      tags:
        - Authentication and authorization
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
        required: true
      responses:
        403:
          description: Incorrect username or password
        400:
          description: Invalid request body format
        200:
          description: Access and refresh tokens generated successfully
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/AuthResponse"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    RoleRead:
      type: object
      properties:
        id:
          type: integer
          example: 2
        name:
          type: string
          example: ROLE_USER
    UserUpdate:
      type: object
      properties:
        username:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
        role:
          type: object
          properties:
            id:
              type: integer
      required:
        - password
        - role
        - username
    UserRead:
      type: object
      properties:
        id:
          type: integer
          example:
            2
        username:
          type: string
          example: user
        role:
          $ref: "#/components/schemas/RoleRead"
      required:
        - id
    CardUpdate:
      type: object
      properties:
        cardNumber:
          type: string
          example: 4111111111111111
        expiryDate:
          type: string
          example: 09/29
        balance:
          type: number
          example: 32
        user:
          type: object
          properties:
            id:
              type: integer
              example: 2
        status:
          type: object
          properties:
            id:
              type: integer
              example: 2
    StatusRead:
      type: object
      properties:
        id:
          type: integer
          example: 2
        name:
          type: string
          example: ACTIVE
      required:
        - id
    CardRead:
      type: object
      properties:
        id:
          type: integer
          example: 1
        cardNumber:
          type: string
          example: 4111111111111111
        expiryDate:
          type: string
          example: 09/29
        balance:
          type: number
          example: 32
        user:
          $ref: "#/components/schemas/UserRead"
        status:
          $ref: "#/components/schemas/StatusRead"
    BlockRequestUpdate:
      type: object
      properties:
        card:
          $ref: "#/components/schemas/CardForBlock"
        description:
          type: string
      required:
        - card
    CardForBlock:
      type: object
      properties:
        id:
          type: integer
          format: int64
    BlockRequestRead:
      type: object
      properties:
        id:
          type: integer
          format: int64
        card:
          $ref: "#/components/schemas/CardForBlock"
        description:
          type: string
    UserCreate:
      type: object
      properties:
        username:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
        role:
          type: object
          properties:
            id:
              type: integer
      required:
        - password
        - role
        - username
    CardCreate:
      type: object
      properties:
        cardNumber:
          type: string
          example: 4111111111111111
        expiryDate:
          type: string
          example: 09/29
        balance:
          type: number
          example: 0
        user:
          type: object
          properties:
            id:
              type: integer
              example: 2
      required:
        - balance
        - cardNumber
        - user
    Transfer:
      type: object
      properties:
        toCardId:
          type: integer
          format: int64
        amount:
          type: number
      required:
        - amount
        - toCardId
    BlockRequestCreate:
      type: object
      properties:
        card:
          $ref: "#/components/schemas/CardForBlock"
        description:
          type: string
      required:
        - card
    RefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken
    AuthRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    CardPatch:
      type: object
      properties:
        status:
          type: object
          properties:
            id:
              type: integer
    PageUserRead:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/UserRead"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: "#/components/schemas/SortObject"
        paged:
          type: boolean
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PageCardRead:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/CardRead"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageBlockRequest:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/BlockRequestRead"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean

